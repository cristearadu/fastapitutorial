pip install fastapi[all]
uvicorn main:app --reload -> autoreload on changes
http://127.0.0.1:8000/docs -> swagger


https://github.com/codingwithroby/fastapi-the-complete-course
FastAPI - fastest performing web framework on the market
        - data valiation, documentation, serialization
        - easy development
        - few bugs
        - quick & easy to use (designed with a developer in mind + saves time)
        - Robust
        - Standards

Official documentation: https://fastapi.tiangolo.com/
             Rest API for data
| Web Page | ----------------->  | SERVER (fastAPI) |
|          | <-----------------  |                  |


pip install "uvicorn[standard]"

CRUD operations
- Create -> POST
- Read -> GET
- Update -> PUT
- Delete -> DELETE

             Request to the server
| Web Page | ----------------->  | SERVER (fastAPI) |
|          | <-----------------  |                  |
            Response from the server

- HTTP request methods

FastAPI would add the asynchronous function behind the scene

@app.get("/api-endpoint") -> specify the endpoint name using this decorator
async def first_api():
    return {"message": "Returned message"}

URL: 127.0.0.1:8000/api-endpoint

Path Parameters = request parameters that have been attached to the URL
    - defined to find information based on location
    - Just like a computer file system
        - /Users/Radu/Coding/Documents/Etc...

URL: 127.0.0.1:8000/books
Read- > GET
@app.get("/books")
async def read_all_books():
    return BOOKS

Path at the end of the URL matches the path of the get
With FastAPI you can make dynamic path parameters!!

URL: 127.0.0.1:8000/books/book_one or book_two etc

@app.get("/books/{dynamic_param}")
async def read_all_books(dynamic_param):
    return {"dynamic_param": dynamic_param}

THE PARAMETER BEWTEEN BRACKETS NEEDS TO MATCH THE PARAMETER INTO THE FUNCTION
ORDER MATTERS WITH TYPE PARAMETERS
If i have a function first with /book/{dynamic_param} and underneath it
we have /books/mybook -> it will automatically call /books/{dynamic_param}
using mybook as the {dynamic_param}
@app.get("/books/{dynamic_param}")
async def read_all_books(dynamic_param):
    return {"dynamic_param": dynamic_param}
@app.get("books/mybook")
async def read_all_books():
    return {"book_title": "My Favorite Book"}

FASTAPI LOOKS INTO CHRONOLOGICAL ORDER FROM TOP TO BOTTOM


in API url you can't have spaces
URL: 127.0.0.1:8000/books/title%20four -> "title four"
space = %20

Query Parameters = parameter to use to sord and filter through thata that is not marked by a path parameter
    - request parameters that have been attached afer a ?
    - name=value pairs
    - filter
    127.0.0.1:8000/books/?category=science
Query parameters can be used with path parameters
    127.0.0.1:8000/books/author%20four/?category=science

    book_author -> PATH PARAMETER
    category -> QUERY PARAMETER
@app.get("/books/{book_author}")
async def read_category_by_query(book_author: str, category: str):
    books_to_return = []
    for book in BOOKS:
        if book.get("author").casefold() == book_author.casefold() and \
                book.get("category").casefold() == category.casefold():
            books_to_return.append(book)

    return books_to_return

POST has a body that has additional info that GET does not have
{"title": "Title Seven", "author": "Author Two", "category": "math"}


127.0.0.1:8000/books/create_book

if Body() is the variable of an argument from a function results this error
The code still compiles
TypeError: Failed to execute 'fetch' on 'Window': Request with GET/HEAD method cannot have body.

PUT used to update data

DELETE
127.0.0.1:8000/books/delete_book/{book_title}


If author is a query parameter -> ERROR: Unprocessable Entity
ORDER MATTERS
@app.get("/books/by_author/")
async def fetch_all_books_by_author(author: str):
{
  "detail": [
    {
      "type": "missing",
      "loc": [
        "query",
        "category"
      ],
      "msg": "Field required",
      "input": null,
      "url": "https://errors.pydantic.dev/2.6/v/missing"
    }
  ]
}



Pydantic v1 vs Pydantic v2
FastAPI is now compatible with both Pydantic v1 and Pydantic v2.
Based on how new the version of FastAPI you are using,
there could be small method name changes.

.dict() -> .model_dump()

async def update_book(updated_book=Body()):
Body -> used to explicitly tell FastAPI to get a value from the request body
and treat is as the parameter value
    -> part of FastAPI dependency injection system
    -When you use Body(), you can also specify additional validation and
     metadata parameters, such as whether a field is required or
     its default value
     -> can use Pydantic models for defining the body's structure and
     validation rules

Pydantics & data validation

Pydantics = python library used for data modelling, data parsing with efficient error handling
    -> create a different request model for data validation
    -> field data validation on each variable/element
    -> helps into convert needed object

from pydantic import BaseModel, Field

class BookRequest(BaseModel):
    # class to see if it maches validations
    # if validation matches -> create Book()
    title: str
    author: str
    description: str
    rating: int
    # For default values
    # title: str = "Title"
    # author: str = "Author"
    # description: str = "Random Description"
    # rating: int = 5
    class Config:
        json_schema_extra = {
            "example": {
                  "title": "Title",
                  "author": "Author",
                  "description": "Random Description",
                  "rating": 4
            }
        }

import Path -> validate path parameters

STATUS CODES OVERVIEW
 - help the Client to understand what happened on the server side application
 - international standards
 - 1xx -> information responses (request is processing)
    -> 100 CONTINUE: the initial part of a request has been received and the client should continue with the end of the request (POST/PUT)
    -> 101 SWITCHING PROTOCOLS: server is switching protocols as requested by the client
    -> 102 PROCESSING (webDAV): server has received and is processing the request, but no response is available yet
    -> 103 EARLY HINTS: used to return some response headers before final HTTP message
 - 2xx -> success: request successfully complete
    -> 200 OK (GET): standard response
    -> 201 CREATED (POST): successful and created
    -> 203 Non-Authoritative Information (GET): Response from a third party, not the origin server
    -> 204 NO CONTENT (PUT): was successful, did not create an entity

 - 3xx -> redirection: further action must be complete
 - 4xx -> client error: an error was caused by the client
    -> 400 BAD REQUEST (ANY): cannot process the request, client error
    -> 401 UNAUTHORIZED (ANY): client does not have valid authenttication to target resource
    -> 403 FORBIDDEN (ANY): server understands the rquest but refuses to authorize it
    -> 404 NOT FOUND (ANY): client requested resource that can not be found
    -> 422 UNPROCESSABLE ENTITY (POST/PUT): semantic errors in client request
 - 5xx -> server errors: an error occured on the server
    -> 500 INTERNAL SERVER ERROR (ANY): generic error message when unexpected issue on the server happened

HTTPException -> raise errors in return with a status code
Explicit status code responses
    -> starlette

Pydantic 1 vs Pydantic 2
The three biggest are:

- .dict() function is now renamed to .model_dump()
- schema_extra function within a Config class is now renamed to json_schema_extra
- Optional variables need a =None example: id: Optional[int] = None



Full SQL Database
    -> allows the management into a collection of data
    -> DBMS = database management system
    -> standard language for dealing with relational databases
    -> CRUD: create, read, update, delete

INSERT INTO todos (title, description, priority, complete)
VALUES ('Go to the store', 'Pick up eggs', 4, False);

INSERT INTO todos (title, description, priority, complete)
VALUES ('Cut the lawn', 'Grass is getting long', 5, False);

INSERT INTO todos (title, description, priority, complete)
VALUES ('Feed dog', 'He is getting hungry', 5, False);

INSERT INTO todos (title, description, priority, complete)
VALUES ('Test element', 'He is getting hungry', 5, False);

sqlite> .mode column
sqlite> .mode markdown
sqlite> .mode table
sqlite> .mode box
sqlite> SELECT * FROM todos;


SELECT * FROM totods;
SELECT title FROM totods;
SELECT description FROM totods;
SELECT title, description FROM totods;
SELECT title, description, priority FROM totods;
SELECT * FROM totods WHERE priority=5;
SELECT * FROM todos WHERE title="Feed dog";
SELECT * FROM todos WHERE id=2;

UPDATE todos SET complete=True WHERE id=5;
UPDATE todos SET complete=True WHERE title='Learn something new';

DELETE FROM todos WHERE id=5;
DELETE FROM todos WHERE complete=0;


SQLAlchemy = ORM (object relational mapping)
    -> by default will allow a single thread to communicate
    -> engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
        -> preventing to have more than one thread to interact with the DB at the same time
        ->

async def read_all(db: Annotated[Session, Depends(get_db())]):
Depends = dependency injection
    -> a way to declare things that are are required for the application/function to work by injecting the dependencies
    -> we need to do something before we execute what we try to execute

{
  "title": "Learn FastAPI",
  "description": "So I can learn how to create API endpoints",
  "priority": 5,
  "complete": false
}

Authentication
routers -> APIRouter

One to Many = each user has a group of todos
    - a user can have multiple to dos
    - a to do cannot have multiple users
    - we need to add a new column to our to do's table: OWNER
    - the users's ID will be primary key
    - the owner(from TODOS table) will map their owner key to user's ID

FK = foregin key = column within a relational databae table that provides
    a link between two separate tables
 -> references primary key from another table
 -> most relational databases need foreign keys to be able to link tables together to present data

SELECT * FROM todos;
DELETE FROM todos WHERE id>= 5;
{
  "username": "radu_user",
  "email": "radu@gmail.com",
  "first_name": "radu",
  "last_name": "radu2",
  "role": "admin",
  "password": "test1234",
  "phone_number": "0788776655"
}


JSON Web Token (JWT) = self-contained way to securely transmit data and information between two parties using a JSON Object
    -> JWT can be trustred because are digitally signed which in return allows the server to know if the JWT has been changed at all
    -> JWT should be used when dealing with authorization
    -> JWT is a great way for information to be exchanged between the server and the client
similar structures:
    aaaaaa.bbbbbbbb.cccccccccc
    HEADER: (a)
        -> (alg) algorithm for signing
        -> "typ" the specific type of token
        -> encoded using Base64
        {
        "alg": "HS256",
        "typ": "JWT"
        }

    PAYLOAD: (b)
        -> actual data from the user
        different times of claims
            -> registered
            -> public
            -> private
         -> iss = issuer
         -> sub = subject (local or global)
         -> exp: expiration (not mandatory, but useful)

        {
        "sub": "123465789",
        "name": "Eric Roby",
        "given_name": "Eric",
        "family_name": "Roby",
        "email": "codingwithroby@gmail.com",
        "admin": true
        }

    SIGNATURE: (c)
        ->
        HMACSHA256(
            base4UrlEncode(header) + "." +
            base4UrlEncode(payload) + "." +
            learnonline
        )

http://jwt.io


$ sudo apt-add-repository ppa:redislabs/redis
$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get install redis-server
$ redis-cli
lolwut
set foo 42
get foo
$ sudo service redis-server start


MySQL & PostgreSQL

PRoduction DBMS vs SQLITE

SQLITE3 - local data of storage
    - easy use and easy setup
    - great DB for small/medium apps
    - focuses on different concepts of database management system
    - runs on and in-memory
    - sqlite3 - deploy along with the application

MySQL & PostgreSQL
    - scalability, concurrency, and control
    - run on their own server and port
    - deploy the DB separate from the application

pg user: test1234!

DROP TABLE IF EXISTS users;

CREATE TABLE users(
    id SERIAL,
    email varchar(200) DEFAULT NULL,
    username varchar(45) DEFAULT NULL,
    first_name varchar(45) DEFAULT NULL,
    last_name varchar(45) DEFAULT NULL,
    hashed_password varchar(200) DEFAULT NULL,
    is_active boolean DEFAULT NULL,
    role varchar(45) DEFAULT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS todos;

CREATE TABLE todos(
    id SERIAL,
    title varchar(200) DEFAULT NULL,
    description varchar(200) DEFAULT NULL,
    priority integer DEFAULT NULL,
    complete boolean DEFAULT NULL,
    owner_id integer DEFAULT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (owner_id) REFERENCES users(id)
);


Alembic

- lightweight db migration tool
- allows to change a SQLAlchemy db after is has been created
- will create our tables for us, not enhance any
- allow us to modify ourdatabse schemes

alembic init <folder name> = initializes a new generic env
alembic revision -m <message> = creates a new revision of the env
alembic upgrade <revision #ID> = run our upgrade migration to our db
alembic downgrade -1 = -1 stands for last migration

alembic init alembic
alembic.ini
alembic dir

alembic reveision -m "create phone number col on users table"
write in python new upgrade function
    def upgrade() -> None:
    op.add_column("users", sa.Column("phone_number", sa.String, nullable=True))

alembic upgrage <revision id>
write in python downgrade function
alembic downgrade -1

pytest objects